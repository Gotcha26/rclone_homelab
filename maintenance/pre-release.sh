#!/usr/bin/env bash
#
# pre-release.sh
#
# Script interactif pour pr√©parer le d√©p√¥t Git avant publication d'une release.
#
# üîπ  Permet de synchroniser la branche de travail (ex: 'dev') avec 'main'
#     sans importer tout l'historique interm√©diaire :
#        ‚Üí cr√©e un seul commit de synchronisation sur 'main'
#        ‚Üí aligne ensuite la branche de travail pour √©viter les divergences
# üîπ  Nettoie les branches locales d√©j√† fusionn√©es dans 'main'
# üîπ  Propose la suppression des tags locaux obsol√®tes
# üîπ  Synchronise avec le d√©p√¥t distant et supprime les r√©f√©rences p√©rim√©es
# üîπ  Expire le reflog et compacte agressivement l'historique
# üîπ  Affiche la taille du d√©p√¥t avant et apr√®s chaque √©tape
#
# üß≠  Usage typique :
#    1. Se placer sur la branche de travail (ex: 'dev')
#    2. Lancer ce script avant une release
#    3. Confirmer la synchronisation de 'main' avec l‚Äô√©tat actuel de la branche
#    4. Pousser le r√©sultat : git push origin main --tags
#
# ‚ö†Ô∏è  Ce script n‚Äô√©crase pas l‚Äôhistorique de 'main' ni ne force de push.
# ‚ö†Ô∏è  Ne pas l‚Äôautomatiser dans un cron : les op√©rations interactives sont voulues.
#
# Auteur : Julien Moreau
# Version : 2.1
#
# ---------------------------------------------------------------

set -euo pipefail

export HOME=/root
export SSH_AUTH_SOCK=${SSH_AUTH_SOCK:-""}
export DEBUG_MODE=${DEBUG_MODE:-false}

if [[ "$DEBUG_MODE" == "true" ]]; then
    echo "üîß [DEBUG] HOME=$HOME"
    echo "üîß [DEBUG] SSH_AUTH_SOCK=$SSH_AUTH_SOCK"
    ls -l "$HOME/.ssh/"
fi

# --- Se replacer √† la racine du d√©p√¥t ---
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
REPO_ROOT="$(git -C "$SCRIPT_DIR" rev-parse --show-toplevel 2>/dev/null || true)"

if [[ -z "$REPO_ROOT" ]]; then
    echo "‚ùå Impossible de trouver la racine du d√©p√¥t Git depuis : $SCRIPT_DIR"
    exit 1
fi

pushd "$REPO_ROOT" >/dev/null

echo
echo "============================================================"
echo "üöÄ  Pr√©paration du d√©p√¥t Git pour publication"
echo "============================================================"
echo

# --- V√©rification du remote et configuration SSH ---
remote_url="$(git remote get-url origin 2>/dev/null || true)"
skip_push=false

if [[ -z "$remote_url" ]]; then
    echo "‚ö†Ô∏è  Aucun remote 'origin' d√©tect√©. Les op√©rations distantes seront ignor√©es."
    skip_push=true
else
    echo "üåê  Remote actuel : $remote_url"

    # Si remote HTTPS, conversion automatique en SSH
    if [[ "$remote_url" =~ ^https://github\.com ]]; then
        echo "‚öôÔ∏è  Conversion du remote GitHub HTTPS ‚Üí SSH..."
        ssh_url="git@github.com:Gotcha26/rclone_homelab.git"
        git remote set-url origin "$ssh_url"
        remote_url="$ssh_url"
        echo "‚úÖ  Remote mis √† jour : $remote_url"
    fi

    echo
    echo "üîç  V√©rification des cl√©s SSH locales..."
    ssh_key=""
    for key in "$HOME/.ssh/id_ed25519" "$HOME/.ssh/id_rsa"; do
        if [[ -f "$key" ]]; then
            ssh_key="$key"
            break
        fi
    done

    if [[ -z "$ssh_key" ]]; then
        echo "‚ùå  Aucune cl√© SSH trouv√©e dans ~/.ssh/"
        echo "   ‚Üí Cr√©ez-en une avec : ssh-keygen -t ed25519 -C 'votre_email_github'"
        echo "   Puis ajoutez la cl√© publique sur GitHub : https://github.com/settings/keys"
        echo "‚èπÔ∏è  Op√©ration annul√©e."
        exit 1
    fi

    echo "‚úÖ  Cl√© d√©tect√©e : $ssh_key"

    if [[ ! -f "${ssh_key}.pub" ]]; then
        echo "‚ö†Ô∏è  Cl√© publique absente (${ssh_key}.pub)."
        echo "   Impossible de v√©rifier votre identit√© aupr√®s de GitHub."
        echo "‚èπÔ∏è  Op√©ration annul√©e."
        exit 1
    fi

    # Test de la connexion SSH r√©elle
    echo "üîê  Test de connexion SSH √† GitHub..."
    ssh -i "$ssh_key" -o BatchMode=yes -o StrictHostKeyChecking=no -T git@github.com >/tmp/ssh_test.log 2>&1 || true

    if grep -q "successfully authenticated" /tmp/ssh_test.log; then
        echo "‚úÖ  Connexion SSH √† GitHub op√©rationnelle."
    else
        echo "‚ùå  √âchec d‚Äôauthentification SSH."
        echo "   V√©rifiez votre cl√© publique sur GitHub et r√©essayez : ssh -i $ssh_key -T git@github.com"
        echo "---- D√©tails ----"
        cat /tmp/ssh_test.log
        echo "-----------------"
        exit 1
    fi
fi

# --- Debug info pour les variables Git et taille du d√©p√¥t ---
get_size_kb() { du -sk .git | awk '{print $1}'; }
get_size_human() { du -sh .git | awk '{print $1}'; }

# --- Fonctions utilitaires ---
confirm() {
    local prompt="$1"
    local default="${2:-y}"
    local answer
    echo
    read -rp "$prompt (Y/n/q) : " answer
    echo
    answer="${answer,,}"  # minuscule

    # valeur par d√©faut
    if [[ -z "$answer" ]]; then
        answer="$default"
    fi

    case "$answer" in
        q) echo; echo "üö™ Sortie demand√©e. Abandon du script."; echo; exit 0 ;;
        y|yes) return 0 ;;
        n|no)  return 1 ;;
        *) echo "‚ùì R√©ponse non reconnue. Utilisez y/n/q."; confirm "$prompt" "$default" ;;
    esac
}

# --- Fonction d'explication du stockage Git ---
explain_git_storage() {
    echo
    echo "üìä  Interpr√©tation des statistiques Git :"
    echo "------------------------------------------"

    local count size in_pack packs size_pack prune garbage size_garbage
    count=$(git count-objects -vH | awk '/^count:/ {print $2}')
    size=$(git count-objects -vH | awk '/^size:/ {print $2, $3}')
    in_pack=$(git count-objects -vH | awk '/^in-pack:/ {print $2}')
    packs=$(git count-objects -vH | awk '/^packs:/ {print $2}')
    size_pack=$(git count-objects -vH | awk '/^size-pack:/ {print $2, $3}')
    prune=$(git count-objects -vH | awk '/^prune-packable:/ {print $2}')
    garbage=$(git count-objects -vH | awk '/^garbage:/ {print $2}')
    size_garbage=$(git count-objects -vH | awk '/^size-garbage:/ {print $2, $3}')

    cat <<EOF
- üü¢  Ojets non empaquet√©s (encore individuels dans .git/objects).  ‚Üí count: $count
- üì¶  Taille totale de ces objets bruts.                            ‚Üí size: $size
- üìö  Objets d√©j√† compress√©s dans les fichiers pack.                ‚Üí in-pack: $in_pack
- üß©  Nombre de fichiers pack utilis√©s.                             ‚Üí packs: $packs
- üíæ  Taille totale des fichiers pack.                              ‚Üí size-pack: $size_pack
- üßπ  Objets √©ligibles √† la suppression (souvent 0).                ‚Üí prune-packable: $prune
- üöÆ  Donn√©es inutiles ou corrompues.                               ‚Üí garbage: $garbage
- ‚öôÔ∏è  Taille de ces donn√©es perdues.                                ‚Üí size-garbage: $size_garbage

üí°  En r√©sum√© : Git stocke la majorit√© de ses donn√©es sous forme d‚Äôobjets
   compress√©s dans un ou plusieurs fichiers *.pack*, ce qui explique
   la diff√©rence entre la taille brute et celle finale du d√©p√¥t.
------------------------------------------
EOF
}

# --- D√©but du rapport ---
echo -e "\n============================================================"
echo "üìÇ  D√©p√¥t : $PWD"
echo
echo "=== Constat √©tat initial ==="
git status --short
git branch -vv
git tag -l
git count-objects -vH
explain_git_storage

before_total=$(get_size_kb)
echo "Taille .git avant nettoyage : $(get_size_human)"
echo
echo "=== Fin du constat ==="

# --- Branche principale ---
main_branch="main"

if ! git rev-parse --verify "$main_branch" >/dev/null 2>&1; then
    echo
    echo "‚ö†Ô∏è  En local (ici) la branche '$main_branch' n'existe pas."
    echo "   Tentative de r√©cup√©ration depuis 'origin/$main_branch'..."
    git fetch origin "$main_branch" >/dev/null 2>&1 || true

    if git show-ref --verify --quiet "refs/remotes/origin/$main_branch"; then
        git branch "$main_branch" "origin/$main_branch"
        echo "‚úÖ  Branche '$main_branch' recr√©√©e localement √† partir du remote."
    else
        echo "‚ùå  Impossible de trouver '$main_branch' ni en local ni sur le remote."
        exit 1
    fi
fi

# --- Synchronisation propre de main avec la branche de travail ---
current_branch=$(git symbolic-ref --quiet --short HEAD || echo "detached")

if [[ "$current_branch" != "$main_branch" ]]; then
    echo
    echo "‚ÑπÔ∏è  Vous √™tes sur la branche '$current_branch'."

    # V√©rifier si des modifications locales bloquent le checkout
    if ! git diff-index --quiet HEAD --; then
        echo
        echo "‚ö†Ô∏è  Des modifications locales bloqueraient le checkout vers '$main_branch' :"
        git diff --name-only
        echo
        echo "üí°  Options pour continuer :"
        echo "   1Ô∏è‚É£  Ignorer les changements de permissions dans ce d√©p√¥t (core.fileMode=false)"
        echo "   2Ô∏è‚É£  Stasher temporairement les modifications et les r√©cup√©rer apr√®s"
        echo "   3Ô∏è‚É£  Annuler le checkout (sortie du script)"
        echo
        read -rp "Choisissez une option [1-3] : " opt
        echo
        case "$opt" in
            1)
                git config core.fileMode false
                echo "‚úÖ  Git va d√©sormais ignorer les diff√©rences de mode. Vous pouvez continuer."
                ;;
            2)
                git stash push -u -m "pre-release temporaire"
                echo "‚úÖ  Modifications stashed temporairement."
                ;;
            *)
                echo "üö™  Sortie demand√©e."
                exit 0
                ;;
        esac
    fi

    if confirm "Souhaitez-vous synchroniser LOCALEMENT '$main_branch' avec l'√©tat actuel de '$current_branch' (commit unique) ?"; then
        echo
        echo "üîÄ  Synchronisation : '$main_branch' va devenir une copie exacte de '$current_branch'..."

        # 1Ô∏è‚É£ Se placer sur main
        git checkout "$main_branch"

        # 2Ô∏è‚É£ Supprimer tout le contenu actuel
        git rm -rf . >/dev/null 2>&1 || true
        git clean -fd >/dev/null 2>&1 || true

        # 3Ô∏è‚É£ Copier le contenu de dev
        git checkout "$current_branch" -- .

        # 4Ô∏è‚É£ Commit unique
        git commit -m "Pr√©-release : main align√©e avec $current_branch"

        echo "‚úÖ  '$main_branch' est d√©sormais une copie de '$current_branch'."

        # R√©cup√©rer les modifications stashed si option 2
        if git stash list | grep -q "pre-release temporaire"; then
            git stash pop
            echo "‚úÖ  Modifications locales restaur√©es depuis le stash."
        fi
    else
        echo "‚ÑπÔ∏è  Synchronisation ignor√©e. Le nettoyage se fera sur '$main_branch'."
        git checkout "$main_branch"
    fi
else
    echo "‚ÑπÔ∏è  Vous √™tes d√©j√† sur '$main_branch'. Pas de synchronisation n√©cessaire."
fi

# --- Supprimer les branches locales fusionn√©es dans main (sauf la branche courante) ---
echo -e "\nüßπ  Nettoyage des branches locales fusionn√©es dans '$main_branch'..."
current_branch=$(git symbolic-ref --quiet --short HEAD || echo "detached")

for branch in $(git branch --format='%(refname:short)'); do
    # Ne pas toucher √† main ni √† la branche courante
    if [[ "$branch" != "$main_branch" && "$branch" != "$current_branch" ]]; then
        merge_base=$(git merge-base "$main_branch" "$branch")
        branch_head=$(git rev-parse "$branch")
        if [[ "$merge_base" == "$branch_head" ]]; then
            echo "   Suppression de la branche locale fusionn√©e : $branch"
            git branch -D "$branch"
        fi
    fi
done
after_branches=$(get_size_kb)
echo "üí° Gain apr√®s nettoyage branches : $((before_total - after_branches)) KB ($(get_size_human))"

# --- Supprimer certains tags (& branches) locaux obsol√®tes (optionnel) ---
echo -e "\nüßπ  Gestion des tags locaux obsol√®tes..."
git tag -l
echo
if confirm "Voulez-vous supprimer certains tags locaux ?"; then
    echo
    read -rp "Liste des tags √† supprimer (s√©par√©s par espaces, ou Entr√©e pour annuler) : " tags_to_delete
    echo
    [[ "$tags_to_delete" == "q" ]] && { echo; echo "üö™ Sortie demand√©e. Abandon du script."; echo; exit 0; }
    echo
    for tag in $tags_to_delete; do
        if git rev-parse "$tag" >/dev/null 2>&1; then
            git tag -d "$tag"
            echo "   Tag supprim√© : $tag"
        else
            echo "   ‚ö†Ô∏è  Tag non trouv√© : $tag"
        fi
    done
fi
after_tags=$(get_size_kb)
echo "üí°  Gain apr√®s suppression tags : $((after_branches - after_tags)) KB ($(get_size_human))"

# --- Synchronisation avec le remote ---
echo -e "\nüåê  Synchronisation avec le remote..."
git fetch --prune --all --tags
echo "‚úÖ  Synchronisation termin√©e."

# --- Expiration du reflog ---
echo -e "\nüßπ  Expiration du reflog..."
git reflog expire --expire=now --all

# --- Nettoyage et compactage agressif ---
echo -e "\nüßπ  Nettoyage et compactage agressif du d√©p√¥t..."
git gc --prune=now --aggressive
after_gc=$(get_size_kb)
echo "üí°  Gain apr√®s compactage : $((after_tags - after_gc)) KB ($(get_size_human))"

# --- V√©rification du dernier tag sur main ---
echo -e "\nüîñ  Dernier tag sur '$main_branch' :"
latest_tag=$(git describe --tags --abbrev=0 "$main_branch" 2>/dev/null || echo "aucun")
echo "   $latest_tag"

# --- √âtat final ---
echo -e "\n=== √âtat final apr√®s nettoyage ==="
git status --short
git branch -vv
git tag -l
git count-objects -vH
explain_git_storage

echo "Taille .git apr√®s nettoyage : $(get_size_human)"
echo "üí°  Gain total : $((before_total - after_gc)) KB ($(numfmt --to=iec $(((before_total - after_gc)*1024))))"
echo "============================================================"
echo "üéâ  D√©p√¥t pr√©par√© pour release et installation minimaliste."
echo

# --- Proposition de push vers le remote ---
if [[ "$skip_push" == "false" ]]; then
    echo
    echo "üö®  Vous √™tes sur le point de pousser 'main' vers GitHub."
    echo "‚ö†Ô∏è  Cela √©crasera le contenu actuel de 'main' sur Github avec le commit unique local."
    echo

    if confirm "Confirmez-vous le push de 'main' sur GitHub ?"; then
        echo
        echo "üîÑ  Push en cours..."
        git push origin main --force
        echo "‚úÖ  Push termin√© : 'main' sur GitHub est d√©sormais align√© avec votre branche locale."
    else
        echo "‚ÑπÔ∏è  Push annul√©. 'main' reste uniquement local."
    fi
else
    echo "‚ÑπÔ∏è  Aucun remote d√©tect√©, push impossible."
fi


popd >/dev/null
