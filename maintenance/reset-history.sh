#!/usr/bin/env bash
#
# reset-history.sh
#
# R√©initialise l‚Äôhistorique Git de la branche principale tout en
# conservant le contenu actuel du projet.
#
# üîπ  Cr√©e une sauvegarde optionnelle de l‚Äôancienne branche main.
# üîπ  Supprime tout l‚Äôhistorique et repart d‚Äôun seul commit propre.
# üîπ  Force la mise √† jour du d√©p√¥t distant.
#
# ‚ö†Ô∏è  Op√©ration destructive : les anciens commits de 'main' seront perdus.
# ‚ö†Ô∏è  √Ä ex√©cuter uniquement sur un d√©p√¥t dont on comprend les cons√©quences.
#
# Auteur : Julien Moreau
# Version : 1.1
# ---------------------------------------------------------------

set -euo pipefail

# -- S√©curise l'environnement SSH m√™me sans agent --
export HOME=/root
export SSH_AUTH_SOCK=${SSH_AUTH_SOCK:-""}
export DEBUG_MODE=${DEBUG_MODE:-false}


main_branch="main"
backup_branch="main_backup"

if [[ "$DEBUG_MODE" == "true" ]]; then
    echo "HOME=$HOME"
    echo "SSH_AUTH_SOCK=$SSH_AUTH_SOCK"
    ls -l "$HOME/.ssh/"
fi

echo
echo "============================================================"
echo "üßπ  R√©initialisation compl√®te de la branche '$main_branch'"
echo "============================================================"
echo
echo "**** Infos Git ****"
git status --short
echo "**** _ ****"
echo

# V√©rifier la pr√©sence de la branche main
if ! git rev-parse --verify "$main_branch" >/dev/null 2>&1; then
    echo "‚ö†Ô∏è  La branche '$main_branch' n'existe pas."
    exit 1
fi

# V√©rifier configuration remote et acc√®s SSH
remote_url="$(git remote get-url origin 2>/dev/null || true)"
skip_push=false

if [[ -z "$remote_url" ]]; then
    echo "‚ö†Ô∏è  Aucun remote 'origin' d√©tect√©. Le push final sera ignor√©."
    skip_push=true
else
    echo "üåê  Remote actuel : $remote_url"

    # Forcer l'utilisation de SSH si le remote est HTTPS
    if [[ "$remote_url" =~ ^https://github\.com ]]; then
        echo "‚öôÔ∏è  Conversion du remote GitHub HTTPS ‚Üí SSH obligatoire..."
        ssh_url="git@github.com:Gotcha26/rclone_homelab.git"
        git remote set-url origin "$ssh_url"
        remote_url="$ssh_url"
        echo "‚úÖ  Remote mis √† jour : $remote_url"
    fi

    # V√©rifier la pr√©sence des cl√©s SSH
    echo
    echo "üîç  V√©rification des cl√©s SSH locales..."
    ssh_key=""
    for key in "$HOME/.ssh/id_ed25519" "$HOME/.ssh/id_rsa"; do
        if [[ -f "$key" ]]; then
            ssh_key="$key"
            break
        fi
    done

    if [[ -z "$ssh_key" ]]; then
        echo "‚ùå  Aucune cl√© SSH trouv√©e dans ~/.ssh/"
        echo "   ‚Üí Cr√©ez-en une avec : ssh-keygen -t ed25519 -C 'votre_email_github'"
        echo "   Puis ajoutez la cl√© publique sur GitHub : https://github.com/settings/keys"
        echo "‚èπÔ∏è  Op√©ration annul√©e."
        exit 1
    fi

    echo "‚úÖ  Cl√© d√©tect√©e : $ssh_key"
    if [[ ! -f "${ssh_key}.pub" ]]; then
        echo "‚ö†Ô∏è  Cl√© publique absente (${ssh_key}.pub)."
        echo "   Impossible de v√©rifier votre identit√© aupr√®s de GitHub."
        echo "‚èπÔ∏è  Op√©ration annul√©e."
        exit 1
    fi

    # Test de la connexion SSH r√©elle bas√© sur le code retour
    echo "üîê  Test de connexion SSH √† GitHub..."
    ssh -i "$ssh_key" -o BatchMode=yes -o StrictHostKeyChecking=no -T git@github.com >/tmp/ssh_test.log 2>&1 || true

    if grep -q "successfully authenticated" /tmp/ssh_test.log; then
        echo "‚úÖ  Connexion SSH √† GitHub op√©rationnelle."
    else
        echo "‚ùå  √âchec d‚Äôauthentification SSH."
        echo "   V√©rifiez votre cl√© publique sur GitHub et r√©essayez : ssh -i $ssh_key -T git@github.com"
        echo "‚èπÔ∏è  Arr√™t du script : la connexion SSH est obligatoire pour pousser les changements."
        echo "---- D√©tails ----"
        cat /tmp/ssh_test.log
        echo "-----------------"
        exit 1
    fi
fi

# Confirmation cr√©ation sauvegarde
read -rp "Souhaitez-vous cr√©er une sauvegarde de l'ancien '$main_branch' avant r√©initialisation ? (Y/n/q) : " yn
[[ -z "$yn" || "$yn" =~ ^[Yy]$ ]] && yn="Y"
[[ "$yn" =~ ^[Qq]$ ]] && { echo "üëã  Sortie."; exit 0; }

echo
if [[ "$yn" =~ ^[Yy]$ ]]; then
    echo "üì¶  Cr√©ation de la sauvegarde locale '$backup_branch'..."
    git branch -f "$backup_branch" "$main_branch"
    if [[ $skip_push == false ]]; then
        git push origin "$backup_branch" || echo "‚ÑπÔ∏è  Impossible de pousser '$backup_branch' (peut-√™tre sans acc√®s)."
    fi
    echo "‚úÖ  Sauvegarde pr√™te : '$backup_branch'"
else
    echo "‚è≠Ô∏è  Aucune sauvegarde cr√©√©e."
fi

# Cr√©ation de la nouvelle base
echo
echo "üöß  Cr√©ation d'une nouvelle base propre..."
git checkout --orphan temp_clean
git add -A
git commit -m "R√©initialisation : base propre"

# Remplacer main
git branch -M "$main_branch" old_main
git branch -m temp_clean "$main_branch"
git branch -D old_main 2>/dev/null || true

# Push forc√©
if [[ $skip_push == false ]]; then
    echo
    read -rp "‚ö†Ô∏è  Cette op√©ration va √©craser la branche '$main_branch' distante. Confirmer le push forc√© ? (Y/n/q) : " confirm
    [[ -z "$confirm" || "$confirm" =~ ^[Yy]$ ]] && confirm="Y"
    [[ "$confirm" =~ ^[Qq]$ ]] && { echo "üëã Sortie."; exit 0; }

    echo
    if [[ "$confirm" =~ ^[Yy]$ ]]; then
        echo "üöÄ  Envoi forc√© vers le d√©p√¥t distant..."
        if git push origin "$main_branch" --force; then
            echo "‚úÖ  Nouvelle base publi√©e sur '$main_branch'."
        else
            echo "‚ùå  √âchec du push distant. V√©rifiez vos identifiants ou droits d‚Äôacc√®s."
        fi
    else
        echo "‚èπÔ∏è  Push forc√© annul√©. La r√©initialisation reste locale."
    fi
else
    echo "‚ö†Ô∏è  Aucun push distant effectu√© (remote manquant ou ignor√©)."
fi

echo
echo "============================================================"
echo "‚ú® Branche '$main_branch' nettoy√©e et r√©initialis√©e."
git log --oneline -n 1
echo "============================================================"
