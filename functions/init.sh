#!/usr/bin/env bash

###############################################################################
# Fonction help (aide)
###############################################################################

show_help() {
    cat <<EOF
Usage: $(basename "$0") [OPTIONS]

Options :
  --auto             Lance le script en mode automatique (pas d'affichage du logo)
  --mailto=ADRESSE   Envoie un rapport par e-mail √† l'adresse fournie
  --dry-run          Simule la synchronisation sans transf√©rer ni supprimer de fichiers
  -h, --help         Affiche cette aide et quitte

Description :
  Ce script lit la liste des jobs √† ex√©cuter depuis le fichier :
      $JOBS_FILE
  Chaque ligne doit contenir :
      chemin_source|remote:chemin_destination
  Les lignes vides ou commen√ßant par '#' sont ignor√©es.

  Exemple de ligne :
      /home/user/Documents|OneDrive:Backups/Documents

Fonctionnement :
  - V√©rifie et teste les pr√©-requis au bon d√©roulement des op√©rations.
  - Lance 'rclone sync' pour chaque job avec les options par d√©faut
  - Affiche la sortie coloris√©e dans le terminal
  - G√©n√®re un fichier log INFO dans : $LOG_DIR
  - Si --mailto est fourni et msmtp est configur√©, envoie un rapport HTML
EOF
}


###############################################################################
# Fonction qui corrige la branch de travail en cours
###############################################################################
detect_branch() {
    if [[ -f "$SCRIPT_DIR/config/config.local.sh" ]]; then
        BRANCH="local"
        source "$SCRIPT_DIR/config/config.local.sh"
        print_fancy --align "center" --bg "yellow" --fg "black" --highlight \
        "‚ö†Ô∏è  MODE LOCAL ACTIV√â ‚Äì Branche = $BRANCH ‚ö†Ô∏è "
    elif [[ -f "$SCRIPT_DIR/config/config.dev.sh" ]]; then
        BRANCH="dev"
        source "$SCRIPT_DIR/config/config.dev.sh"
        print_fancy --align "center" --bg "yellow" --fg "black" --highlight \
        "‚ö†Ô∏è  MODE DEV ACTIV√â ‚Äì Branche = $BRANCH ‚ö†Ô∏è "
    else
        BRANCH="main"
        source "$SCRIPT_DIR/config/config.main.sh"
    fi
}


###############################################################################
# Fonction : Affiche le logo ASCII GOTCHA (uniquement en mode manuel)
###############################################################################

print_logo() {
    echo
    echo
    local RED="$(get_fg_color red)"
    local RESET="$(get_fg_color reset)"

    # R√®gle "tout sauf #"
    sed -E "s/([^#])/${RED}\1${RESET}/g" <<'EOF'
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
::::::'######:::::'#######:::'########:::'######:::'##::::'##:::::'###:::::::::
:::::'##... ##:::'##.... ##::... ##..:::'##... ##:: ##:::: ##::::'## ##::::::::
::::: ##:::..:::: ##:::: ##::::: ##::::: ##:::..::: ##:::: ##:::'##:. ##:::::::
::::: ##::'####:: ##:::: ##::::: ##::::: ##:::::::: #########::'##:::. ##::::::
::::: ##::: ##::: ##:::: ##::::: ##::::: ##:::::::: ##.... ##:: #########::::::
::::: ##::: ##::: ##:::: ##::::: ##::::: ##::: ##:: ##:::: ##:: ##.... ##::::::
:::::. ######::::. #######:::::: ##:::::. ######::: ##:::: ##:: ##:::: ##::::::
::::::......::::::.......:::::::..:::::::......::::..:::::..:::..:::::..:::::::
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
EOF
    echo
    echo
}


###############################################################################
# Fonction : V√©rifie la pr√©sence de l'installation de rclone
# Propose de l'installer si besoin
###############################################################################
check_rclone() {
    local force_install=${1:-false}

    if ! command -v rclone >/dev/null 2>&1 || [[ "$force_install" == true ]]; then
        echo
        echo "‚ö†Ô∏è  rclone n'est pas install√© ou installation forc√©e."

        if [[ "$force_install" != true ]]; then
            read -rp "Voulez-vous l'installer maintenant ? [y/N] : " REPLY
            REPLY=${REPLY,,}  # met en minuscules
        else
            REPLY="y"
        fi

        if [[ "$REPLY" == "y" || "$REPLY" == "yes" ]]; then
            echo "üì¶  Installation de rclone en cours..."
            sudo apt update && sudo apt install rclone -y
            if [[ $? -eq 0 ]]; then
                echo "‚úÖ  rclone a √©t√© install√© avec succ√®s !"
            else
                die 11 "Une erreur est survenue lors de l'installation de rclone."
            fi
        else
            die 11 "rclone n'est toujours pas install√©. Le script va s'arr√™ter."
        fi
    fi
}


###############################################################################
# Fonction : V√©rifie la configuration initiale de rclone
# Propose de l'√©diter si besoin
###############################################################################
check_rclone_config() {
    local conf_file="${RCLONE_CONFIG_DIR:-$HOME/.config/rclone/rclone.conf}"

    if [[ ! -f "$conf_file" || ! -s "$conf_file" ]]; then
        echo
        echo "‚ö†Ô∏è  rclone est install√© mais n'est pas configur√©."
        echo "Vous devez configurer rclone avant de poursuivre."
        echo "Pour configurer, vous pouvez ex√©cuter : rclone config"
        echo

        read -rp "Voulez-vous √©diter directement le fichier de configuration rclone ? [y/N] : " EDIT_REPLY
        EDIT_REPLY=${EDIT_REPLY,,}

        if [[ "$EDIT_REPLY" == "y" || "$EDIT_REPLY" == "yes" ]]; then
            </dev/tty >/dev/tty 2>&1 ${EDITOR:-nano} "$conf_file"
            echo "Fichier de configuration √©dit√©. Relancez le script apr√®s avoir sauvegard√©."
        else
            echo "Le script va s'arr√™ter. Configurez rclone et relancez le script."
        fi
        die 12 "rclone est install√© mais n'est pas configur√©. Veuillez ex√©cuter : rclone config"
    fi
}


###############################################################################
# Fonction : V√©rifie la pr√©sence de l'installation de msmtp
# Propose de l'installer si besoin
###############################################################################
check_msmtp() {
    local force_install=${1:-false}

    if ! command -v msmtp >/dev/null 2>&1 || [[ "$force_install" == true ]]; then
        echo
        echo "‚ö†Ô∏è  msmtp n'est pas install√© ou installation forc√©e."

        if [[ "$force_install" != true ]]; then
            read -rp "Voulez-vous l'installer maintenant ? [y/N] : " REPLY
            REPLY=${REPLY,,}  # met en minuscules
        else
            REPLY="y"
        fi

        if [[ "$REPLY" == "y" || "$REPLY" == "yes" ]]; then
            echo "üì¶  Installation de msmtp en cours..."
            sudo apt update && sudo apt install msmtp msmtp-mta -y
            if [[ $? -eq 0 ]]; then
                echo "‚úÖ  msmtp a √©t√© install√© avec succ√®s !"
            else
                die 10 "Une erreur est survenue lors de l'installation de msmtp."
            fi
        else
            die 10 "msmtp n'est toujours pas install√©. Le script va s'arr√™ter."
        fi
    fi
}


###############################################################################
# Fonction : V√©rifie la configuration initiale de msmtp
# Propose de l'√©diter si besoin
###############################################################################
check_msmtp_config() {
    local conf_file=""

    if [[ -f "$HOME/.msmtprc" && -s "$HOME/.msmtprc" ]]; then
        conf_file="$HOME/.msmtprc"
    elif [[ -f "/etc/msmtprc" && -s "/etc/msmtprc" ]]; then
        conf_file="/etc/msmtprc"
    fi

    if [[ -z "$conf_file" ]]; then
        echo
        echo "‚ö†Ô∏è  msmtp est install√© mais n'est pas configur√©."
        echo "Vous devez configurer msmtp avant de poursuivre."
        echo "Pour configurer, vous pouvez ex√©cuter : msmtp --configure"
        echo "Ou √©diter le fichier suivant :"
        echo "    ~/.msmtprc (perso) ou /etc/msmtprc (global)"
        echo

        read -rp "Voulez-vous √©diter directement le fichier de configuration msmtp ? [y/N] : " EDIT_REPLY
        EDIT_REPLY=${EDIT_REPLY,,}

        if [[ "$EDIT_REPLY" == "y" || "$EDIT_REPLY" == "yes" ]]; then
            </dev/tty >/dev/tty 2>&1 ${EDITOR:-nano} "$HOME/.msmtprc"
            echo "Fichier de configuration √©dit√©. Relancez le script apr√®s avoir sauvegard√©."
        else
            echo "Le script va s'arr√™ter. Configurez msmtp et relancez le script."
        fi
        die 22 "msmtp est install√© mais n'est pas configur√©. Veuillez ex√©cuter : msmtp --configure"
    fi
}


###############################################################################
# Fonctions de d√©tection des configs
###############################################################################
rclone_configured() {
    [[ -f "$RCLONE_CONF" ]] && [[ -s "$RCLONE_CONF" ]]
}

msmtp_configured() {
    [[ -f "$MSMTP_CONF" ]] && [[ -s "$MSMTP_CONF" ]]
}


###############################################################################
# Fonction : V√©rifier la pr√©sence de jobs configur√©s
###############################################################################
jobs_configured() {
    [[ -f "$JOBS_CONF" ]] && [[ -s "$JOBS_CONF" ]]
}


###############################################################################
# Fonction : V√©rifier la pr√©sence de jobs configur√©s
###############################################################################
jobs_configured() {
    [[ -f "$JOBS_CONF" ]] && [[ -s "$JOBS_CONF" ]]
}


###############################################################################
# Fonction : Installer les d√©pendances manquantes (rclone / msmtp)
###############################################################################
install_missing_deps() {
    check_rclone true
    check_msmtp true
    echo "üéâ D√©pendances install√©es."
}


###############################################################################
# Fonction d'affichage du tableau r√©capitulatif avec bordures
###############################################################################
print_aligned_table() {
    local label="$1"
    local value="$2"
    local label_width=20

    # Calcul de la longueur du label
    local label_len=${#label}
    local spaces=$((label_width - label_len))

    # G√©n√®re les espaces √† ajouter apr√®s le label
    local padding=""
    if (( spaces > 0 )); then
        padding=$(printf '%*s' "$spaces" '')
    fi

    # Affiche la ligne avec label + padding + " : " + value
    printf "%s%s : %s\n" "$label" "$padding" "$value"
}


###############################################################################
# Fonction : Affiche le r√©sum√© de la t√¢che
###############################################################################
print_summary_table() {
    END_TIME="$(date '+%Y-%m-%d %H:%M:%S')"
    echo
    echo "INFOS"
    printf '%*s\n' "$TERM_WIDTH_DEFAULT" '' | tr ' ' '='

    print_aligned_table "Date / Heure d√©but" "$START_TIME"
    print_aligned_table "Date / Heure fin" "$END_TIME"
    print_aligned_table "Mode de lancement" "$LAUNCH_MODE"
    print_aligned_table "Nb. de jobs trait√©s" "${EXECUTED_JOBS} / ${#JOBS_LIST[@]}"
    print_aligned_table "Code erreur" "$ERROR_CODE"
    print_aligned_table "Dossier" "${LOG_DIR}/"
    print_aligned_table "Log script" "$FILE_SCRIPT"
    print_aligned_table "Log mail" "$FILE_MAIL"
    print_aligned_table "Log rclone" "$FILE_INFO"

    if [[ -n "$MAIL_TO" ]]; then
        print_aligned_table "Email envoy√© √†" "$MAIL_TO"
        print_aligned_table "Sujet email" "$SUBJECT_RAW"
    fi

    if [[ -n "$DISCORD_WEBHOOK_URL" ]]; then
        print_aligned_table "Notifs Discord" "$MSG_DISCORD_PROCESSED"
    else
        print_aligned_table "Notifs Discord" "$MSG_DISCORD_ABORDED"
    fi

    [[ "$DRY_RUN" == true ]] && print_aligned_table "Simulation (dry-run)" "$MSG_DRYRUN"

    printf '%*s\n' "$TERM_WIDTH_DEFAULT" '' | tr ' ' '='

    # Ligne finale avec couleur fond jaune fonc√©, texte noir, centr√©e
    print_fancy --bg "yellow" --fg "black" "$MSG_END_REPORT"
    echo
}