#!/usr/bin/env bash
#
# reset-history.sh
#
# R√©initialise l‚Äôhistorique Git de la branche principale tout en
# conservant le contenu actuel du projet.
#
# üîπ Cr√©e une sauvegarde optionnelle de l‚Äôancienne branche main.
# üîπ Supprime tout l‚Äôhistorique et repart d‚Äôun seul commit propre.
# üîπ Force la mise √† jour du d√©p√¥t distant.
#
# ‚ö†Ô∏è Op√©ration destructive : les anciens commits de 'main' seront perdus.
# ‚ö†Ô∏è √Ä ex√©cuter uniquement sur un d√©p√¥t dont on comprend les cons√©quences.
#
# Auteur : Julien Moreau
# Version : 1.1
# ---------------------------------------------------------------

set -euo pipefail

main_branch="main"
backup_branch="main_backup"

echo
echo "============================================================"
echo "üßπ  R√©initialisation compl√®te de la branche '$main_branch'"
echo "============================================================"
echo
echo "**** Infos Git ****"
git status --short
echo "****"
echo

# V√©rifier la pr√©sence de la branche main
if ! git rev-parse --verify "$main_branch" >/dev/null 2>&1; then
    echo "‚ö†Ô∏è  La branche '$main_branch' n'existe pas."
    exit 1
fi

# --- Confirmation avec valeurs par d√©faut ---
confirm_prompt() {
    local prompt="$1"
    local default="$2"
    local answer
    echo
    read -rp "$prompt" answer
    echo
    case "${answer,,}" in
        q) echo "‚ùå  Op√©ration annul√©e."; exit 0 ;;
        y|"") [[ "$default" == "Y" ]] && return 0 || return 1 ;;
        n) [[ "$default" == "N" ]] && return 0 || return 1 ;;
        *) echo "‚ö†Ô∏è  R√©ponse invalide."; confirm_prompt "$prompt" "$default" ;;
    esac
}

# Sauvegarde optionnelle (par d√©faut : oui)
if confirm_prompt "Souhaitez-vous cr√©er une sauvegarde de l'ancien '$main_branch' avant r√©initialisation ? (Y/n/q) : " "Y"; then
    echo "üì¶  Cr√©ation de la sauvegarde locale '$backup_branch'..."
    git branch -f "$backup_branch" "$main_branch"
    git push origin "$backup_branch" || echo "‚ÑπÔ∏è  Impossible de pousser '$backup_branch' (peut-√™tre sans remote)."
    echo "‚úÖ  Sauvegarde pr√™te : '$backup_branch'"
else
    echo "‚è≠Ô∏è  Aucune sauvegarde cr√©√©e."
fi

# Cr√©er une nouvelle branche orpheline
echo
echo "üöß  Cr√©ation d'une nouvelle base propre..."
git checkout --orphan temp_clean
git add -A
git commit -m "R√©initialisation : base propre"

# Remplacer main par la nouvelle branche
git branch -M "$main_branch" old_main
git branch -m temp_clean "$main_branch"
git branch -D old_main 2>/dev/null || true

# Push forc√© (par d√©faut : oui)
if confirm_prompt "‚ö†Ô∏è  Cette op√©ration va √©craser la branche '$main_branch' distante. Confirmer le push forc√© ? (Y/n/q) : " "Y"; then
    echo "üöÄ Envoi forc√© vers le d√©p√¥t distant..."
    git push origin "$main_branch" --force
    echo "‚úÖ  Nouvelle base publi√©e sur '$main_branch'."
else
    echo "‚èπÔ∏è  Push forc√© annul√©. La r√©initialisation reste locale."
fi

echo
echo "============================================================"
echo "‚ú® Branche '$main_branch' nettoy√©e et r√©initialis√©e."
git log --oneline -n 1
echo "============================================================"
