Je veux un système de vérifications préalables avant de lancer rclone. En cas d'anomalies, on arrête le script et on explique pourquoi.
- Je veux une vérification de la présence du fichier "jobs_file". Celui-ci doit être un argument facilement éditable en début de script dans une partie "Variables".
- Je veux une vérification des jobs pour vérifier que la dossier source existe et est accessible. Je veux aussi une vérification du "remote" pour savoir s'il existe dans la configuration de rclone. Enfin, on ne vérifie pas la destination, ce sera à la tâche rclone de le faire.
Il faut détecter un accès local impossible, l'absence du fichier "jobs_file" etc





#!/usr/bin/env bash
###############################################################################
# Script : rclone_sync_job.sh
# Version : 1.2 - 2025-08-08
# Auteur  : Julien & ChatGPT
#
# Description :
#   Lit la liste des jobs dans rclone_jobs.txt et exécute rclone pour chacun.
#   Format du fichier rclone_jobs.txt :
#       source|destination
#
#   Les lignes commençant par # ou vides sont ignorées.
###############################################################################

set -euo pipefail

###############################################################################
# Variables
###############################################################################
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
JOBS_FILE="$SCRIPT_DIR/rclone_jobs.txt"   # Modifier ici si besoin

###############################################################################
# Vérifications initiales
###############################################################################
if [[ ! -f "$JOBS_FILE" ]]; then
    echo "❌ Fichier jobs introuvable : $JOBS_FILE" >&2
    exit 1
fi
if [[ ! -r "$JOBS_FILE" ]]; then
    echo "❌ Fichier jobs non lisible : $JOBS_FILE" >&2
    exit 1
fi

# Charger la liste des remotes configurés dans rclone
mapfile -t RCLONE_REMOTES < <(rclone listremotes 2>/dev/null | sed 's/:$//')

###############################################################################
# Pré-vérification de tous les jobs
###############################################################################
while IFS= read -r line; do
    # Ignorer les commentaires et lignes vides
    [[ -z "$line" || "$line" =~ ^# ]] && continue

    # Séparation par le caractère "|"
    IFS='|' read -r src dst <<< "$line"

    # Suppression des espaces autour
    src="${src#"${src%%[![:space:]]*}"}"
    src="${src%"${src##*[![:space:]]}"}"
    dst="${dst#"${dst%%[![:space:]]*}"}"
    dst="${dst%"${dst##*[![:space:]]}"}"

    if [[ -z "$src" || -z "$dst" ]]; then
        echo "❌ Ligne invalide dans $JOBS_FILE : $line" >&2
        exit 1
    fi

    # Vérif source locale
    if [[ ! -d "$src" ]]; then
        echo "❌ Dossier source introuvable ou inaccessible : $src" >&2
        exit 1
    fi

    # Vérif remote (on ne teste que s'il y a un remote dans la destination)
    if [[ "$dst" == *":"* ]]; then
        remote_name="${dst%%:*}"
        if [[ ! " ${RCLONE_REMOTES[*]} " =~ " ${remote_name} " ]]; then
            echo "❌ Remote inconnu dans rclone : $remote_name" >&2
            exit 1
        fi
    fi
done < "$JOBS_FILE"

###############################################################################
# Exécution des jobs
###############################################################################
while IFS= read -r line; do
    [[ -z "$line" || "$line" =~ ^# ]] && continue

    IFS='|' read -r src dst <<< "$line"
    src="${src#"${src%%[![:space:]]*}"}"
    src="${src%"${src##*[![:space:]]}"}"
    dst="${dst#"${dst%%[![:space:]]*}"}"
    dst="${dst%"${dst##*[![:space:]]}"}"

    echo "=== Synchronisation : $src → $dst ==="
    rclone sync "$src" "$dst" --log-level INFO
    echo
done < "$JOBS_FILE"
