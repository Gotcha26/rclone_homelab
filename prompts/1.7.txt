Voici un script :

[1.6]

Je veux que tu le mette à jour (en-tête) et que tu rajoutes la coloration syntaxique afin de faire ressortir les éléments que va afficher le retour de la commande rclone. Utilise du bleu pour les ajouts, du rouge pour la suppression et du orange lorsque le fichier est déjà synchronisé.

Mets à jour le code et explique moi ce que tu as fais.




#!/usr/bin/env bash
###############################################################################
# Script : rclone_sync_job.sh
# Version : 1.9 - 2025-08-09
# Auteur  : Julien & ChatGPT
#
# Description :
#   Lit la liste des jobs dans rclone_jobs.txt et exécute rclone pour chacun.
#   Format du fichier rclone_jobs.txt :
#       source|destination
#
#   Les lignes commençant par # ou vides sont ignorées.
#   L'option --auto permet d'indiquer un lancement automatique.
#
#   En fin d'exécution, un tableau récapitulatif avec bordures est affiché.
###############################################################################

set -uo pipefail  # On retire -e pour éviter l'arrêt brutal, on gère les erreurs manuellement

###############################################################################
# Variables
###############################################################################
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
JOBS_FILE="$SCRIPT_DIR/rclone_jobs.txt"   # Modifier ici si besoin
TMP_RCLONE="/mnt/tmp_rclone"

# Couleurs
RED='\033[31m'
BLUE='\033[34m'
ORANGE='\033[33m'
RESET='\033[0m'

# Options rclone (1 par ligne)
RCLONE_OPTS=(
    --log-level INFO
    --size-only
    --temp-dir "$TMP_RCLONE"
    # --dry-run
    # --progress
)

START_TIME="$(date '+%Y-%m-%d %H:%M:%S')"
END_TIME=""
ERROR_CODE=0
JOBS_COUNT=0
LAUNCH_MODE="manuel"

###############################################################################
# Lecture des options du script
###############################################################################
for arg in "$@"; do
    case "$arg" in
        --auto)
            LAUNCH_MODE="automatique"
            shift
            ;;
        *)
            ;;
    esac
done

###############################################################################
# Fonction d'affichage du tableau récapitulatif avec bordures
###############################################################################
print_aligned() {
    local label="$1"
    local value="$2"
    local label_width=20
    local label_len=${#label}
    local spaces=$((label_width - label_len))
    local padding=""
    if (( spaces > 0 )); then
        padding=$(printf '%*s' "$spaces" '')
    fi
    printf "%s%s : %s\n" "$label" "$padding" "$value"
}

print_summary_table() {
    END_TIME="$(date '+%Y-%m-%d %H:%M:%S')"
    echo
    print_aligned "Date / Heure début" "$START_TIME"
    print_aligned "Date / Heure fin" "$END_TIME"
    print_aligned "Mode de lancement" "$LAUNCH_MODE"
    print_aligned "Nombre de jobs" "$JOBS_COUNT"
    print_aligned "Code erreur" "$ERROR_CODE"
    echo
}

trap 'print_summary_table' EXIT

###############################################################################
# Vérifications initiales
###############################################################################
if [[ ! -f "$JOBS_FILE" ]]; then
    echo "❌ Fichier jobs introuvable : $JOBS_FILE" >&2
    ERROR_CODE=1
    exit $ERROR_CODE
fi
if [[ ! -r "$JOBS_FILE" ]]; then
    echo "❌ Fichier jobs non lisible : $JOBS_FILE" >&2
    ERROR_CODE=2
    exit $ERROR_CODE
fi
if [[ ! -d "$TMP_RCLONE" ]]; then
    echo "❌ Dossier temporaire rclone introuvable : $TMP_RCLONE" >&2
    ERROR_CODE=7
    exit $ERROR_CODE
fi

mapfile -t RCLONE_REMOTES < <(rclone listremotes 2>/dev/null | sed 's/:$//')

###############################################################################
# Pré-vérification de tous les jobs
###############################################################################
while IFS= read -r line; do
    [[ -z "$line" || "$line" =~ ^# ]] && continue
    IFS='|' read -r src dst <<< "$line"
    src="${src#"${src%%[![:space:]]*}"}"
    src="${src%"${src##*[![:space:]]}"}"
    dst="${dst#"${dst%%[![:space:]]*}"}"
    dst="${dst%"${dst##*[![:space:]]}"}"

    if [[ -z "$src" || -z "$dst" ]]; then
        echo "❌ Ligne invalide dans $JOBS_FILE : $line" >&2
        ERROR_CODE=3
        exit $ERROR_CODE
    fi
    if [[ ! -d "$src" ]]; then
        echo "❌ Dossier source introuvable ou inaccessible : $src" >&2
        ERROR_CODE=4
        exit $ERROR_CODE
    fi
    if [[ "$dst" == *":"* ]]; then
        remote_name="${dst%%:*}"
        if [[ ! " ${RCLONE_REMOTES[*]} " =~ " ${remote_name} " ]]; then
            echo "❌ Remote inconnu dans rclone : $remote_name" >&2
            ERROR_CODE=5
            exit $ERROR_CODE
        fi
    fi
done < "$JOBS_FILE"

###############################################################################
# Exécution des jobs
###############################################################################
while IFS= read -r line; do
    [[ -z "$line" || "$line" =~ ^# ]] && continue
    IFS='|' read -r src dst <<< "$line"
    src="${src#"${src%%[![:space:]]*}"}"
    src="${src%"${src##*[![:space:]]}"}"
    dst="${dst#"${dst%%[![:space:]]*}"}"
    dst="${dst%"${dst##*[![:space:]]}"}"

    echo "=== Synchronisation : $src → $dst ==="
    echo "Tâche lancée le $(date '+%Y-%m-%d à %H:%M:%S') (mode : $LAUNCH_MODE)"

    # Exécution avec colorisation
    if ! rclone sync "$src" "$dst" "${RCLONE_OPTS[@]}" 2>&1 | \
        sed -E \
            -e "s/(copied|Copied|added|Added)/${BLUE}\1${RESET}/g" \
            -e "s/(deleted|Deleted)/${RED}\1${RESET}/g" \
            -e "s/(unchanged|Unchanged|already exists)/${ORANGE}\1${RESET}/g"; then
        ERROR_CODE=6
    fi

    ((JOBS_COUNT++))
    echo
done < "$JOBS_FILE"

exit $ERROR_CODE
